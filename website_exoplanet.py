# -*- coding: utf-8 -*-
"""Website_exoplanet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LZatS4PsNeeu0Kre1_RL41n7pKXRv6XT
"""

!pip install flask
from flask import Flask, render_template, request

!pip install lightkurve

!pip install flask-ngrok
!pip install pyngrok

!mkdir templates
!mkdir static

!ngrok authtoken 2WOoqjJaOhzS0BeiFT6HAoQgBkg_5tNDbz6MEBP8ac3i3PwmJ

from flask import Flask, render_template, request
from flask_ngrok import run_with_ngrok
import lightkurve as lk
import matplotlib.pyplot as plt
import numpy as np
from io import BytesIO
import base64

app = Flask(__name__, template_folder='templates', static_folder='static')
run_with_ngrok(app)

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        tic_id = request.form['tic_id']

        sector_data = lk.search_lightcurve(tic_id, author='SPOC')[1]
        light_curve = sector_data.download()

        lc = light_curve.remove_outliers()

        period = np.linspace(1, 83, 10000)
        box_least_squares = lc.to_periodogram(method='bls', period=period, frequency_factor=700)
        planet1_period = box_least_squares.period_at_max_power
        planet1_transit_time = box_least_squares.transit_time_at_max_power
        planet1_dur = box_least_squares.duration_at_max_power

        lc_phase_folded = lc.fold(period=planet1_period.value, epoch_time=planet1_transit_time.value, wrap_phase=planet1_period.value / 2)

        min_observation_cadence = 30
        days_observation_cadence = min_observation_cadence / 24 / 60
        lc_phase_binned_result = lc_phase_folded.bin(days_observation_cadence)

        planet1_model = box_least_squares.get_transit_model(period=planet1_period,
                                                            transit_time=planet1_transit_time,
                                                            duration=planet1_dur)

        fig, ax = plt.subplots()
        lc_phase_binned_result.scatter(ax=ax, color='black', marker='o', lw=0, alpha=0.8)
        planet1_model.fold(planet1_period, planet1_transit_time).plot(ax=ax, color='red', lw=2)
        ax.set_xlim(-3, 3)

        # Save the plot to a BytesIO object
        img_buf = BytesIO()
        plt.savefig(img_buf, format='png')
        img_buf.seek(0)
        img_data = base64.b64encode(img_buf.read()).decode()

        plt.close()

        return render_template('result.html', img_data=img_data)

    return render_template('index.html')

if __name__ == '__main__':
    app.run()

